// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ProductCategory string

const (
	ProductCategoryEletrnicos   ProductCategory = "Eletrônicos"
	ProductCategoryRoupas       ProductCategory = "Roupas"
	ProductCategoryLivros       ProductCategory = "Livros"
	ProductCategoryEsportes     ProductCategory = "Esportes"
	ProductCategoryCasaeDecorao ProductCategory = "Casa e Decoração"
)

func (e *ProductCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductCategory(s)
	case string:
		*e = ProductCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductCategory: %T", src)
	}
	return nil
}

type NullProductCategory struct {
	ProductCategory ProductCategory `json:"product_category"`
	Valid           bool            `json:"valid"` // Valid is true if ProductCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductCategory) Scan(value interface{}) error {
	if value == nil {
		ns.ProductCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductCategory), nil
}

// Tabela principal de produtos do e-commerce
type Product struct {
	// Identificador único do produto (UUID v4)
	ID uuid.UUID `json:"id"`
	// Nome comercial do produto
	Name string `json:"name"`
	// Categoria do produto (Eletrônicos, Roupas, Livros, Esportes, Casa e Decoração)
	Category string `json:"category"`
	// Preço unitário do produto em reais (BRL)
	Price float64 `json:"price"`
	// Descrição detalhada do produto
	Description pgtype.Text `json:"description"`
	// Quantidade disponível em estoque
	Stock int32 `json:"stock"`
	// Data e hora de criação do registro
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	// Data e hora da última atualização do registro
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type VwExpensiveProductsByCategory struct {
	Category string  `json:"category"`
	Name     string  `json:"name"`
	Price    float64 `json:"price"`
	Stock    int32   `json:"stock"`
}

type VwLowStockProduct struct {
	ID            uuid.UUID   `json:"id"`
	Name          string      `json:"name"`
	Category      string      `json:"category"`
	Price         float64     `json:"price"`
	Stock         int32       `json:"stock"`
	StatusEstoque interface{} `json:"status_estoque"`
}

type VwProductStat struct {
	Category      string      `json:"category"`
	TotalProdutos int64       `json:"total_produtos"`
	PrecoMinimo   interface{} `json:"preco_minimo"`
	PrecoMaximo   interface{} `json:"preco_maximo"`
	PrecoMedio    float64     `json:"preco_medio"`
	EstoqueTotal  int64       `json:"estoque_total"`
}
