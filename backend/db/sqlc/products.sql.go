// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*)
FROM products
WHERE 
    (CASE WHEN $1::text != '' THEN 
        name ILIKE '%' || $1::text || '%' 
    ELSE TRUE END)
    AND (CASE WHEN $2::text != '' THEN 
        category = $2::text 
    ELSE TRUE END)
    AND (CASE WHEN $3 > 0 THEN 
        price >= $3 
    ELSE TRUE END)
    AND (CASE WHEN $4 > 0 THEN 
        price <= $4 
    ELSE TRUE END)
`

type CountProductsParams struct {
	ProductName string      `json:"product_name"`
	Category    string      `json:"category"`
	MinPrice    interface{} `json:"min_price"`
	MaxPrice    interface{} `json:"max_price"`
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts,
		arg.ProductName,
		arg.Category,
		arg.MinPrice,
		arg.MaxPrice,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name,
    category,
    price,
    description,
    stock
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, category, price, description, stock, created_at, updated_at
`

type CreateProductParams struct {
	Name        string      `json:"name"`
	Category    string      `json:"category"`
	Price       float64     `json:"price"`
	Description pgtype.Text `json:"description"`
	Stock       int32       `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Category,
		arg.Price,
		arg.Description,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Price,
		&i.Description,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT DISTINCT category
FROM products
ORDER BY category
`

func (q *Queries) GetCategories(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var category string
		if err := rows.Scan(&category); err != nil {
			return nil, err
		}
		items = append(items, category)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT 
    id,
    name,
    category,
    price,
    description,
    stock,
    created_at,
    updated_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Price,
		&i.Description,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductStats = `-- name: GetProductStats :one
SELECT 
    COUNT(*) as total_products,
    COUNT(DISTINCT category) as total_categories,
    COALESCE(AVG(price), 0) as average_price,
    COALESCE(MIN(price), 0) as min_price,
    COALESCE(MAX(price), 0) as max_price,
    COALESCE(SUM(stock), 0) as total_stock
FROM products
`

type GetProductStatsRow struct {
	TotalProducts   int64       `json:"total_products"`
	TotalCategories int64       `json:"total_categories"`
	AveragePrice    interface{} `json:"average_price"`
	MinPrice        interface{} `json:"min_price"`
	MaxPrice        interface{} `json:"max_price"`
	TotalStock      interface{} `json:"total_stock"`
}

func (q *Queries) GetProductStats(ctx context.Context) (GetProductStatsRow, error) {
	row := q.db.QueryRow(ctx, getProductStats)
	var i GetProductStatsRow
	err := row.Scan(
		&i.TotalProducts,
		&i.TotalCategories,
		&i.AveragePrice,
		&i.MinPrice,
		&i.MaxPrice,
		&i.TotalStock,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT 
    id,
    name,
    category,
    price,
    description,
    stock,
    created_at,
    updated_at
FROM products
WHERE 
    (CASE WHEN $3::text != '' THEN 
        name ILIKE '%' || $3::text || '%' 
    ELSE TRUE END)
    AND (CASE WHEN $4::text != '' THEN 
        category = $4::text 
    ELSE TRUE END)
    AND (CASE WHEN $5 > 0 THEN 
        price >= $5 
    ELSE TRUE END)
    AND (CASE WHEN $6 > 0 THEN 
        price <= $6 
    ELSE TRUE END)
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetProductsParams struct {
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
	ProductName string      `json:"product_name"`
	Category    string      `json:"category"`
	MinPrice    interface{} `json:"min_price"`
	MaxPrice    interface{} `json:"max_price"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts,
		arg.Limit,
		arg.Offset,
		arg.ProductName,
		arg.Category,
		arg.MinPrice,
		arg.MaxPrice,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.Price,
			&i.Description,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET 
    name = COALESCE(NULLIF($2, ''), name),
    category = COALESCE(NULLIF($3, ''), category),
    price = COALESCE(NULLIF($4, 0), price),
    description = COALESCE(NULLIF($5, ''), description),
    stock = COALESCE(NULLIF($6, -1), stock)
WHERE id = $1
RETURNING id, name, category, price, description, stock, created_at, updated_at
`

type UpdateProductParams struct {
	ID      uuid.UUID   `json:"id"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Column4 interface{} `json:"column_4"`
	Column5 interface{} `json:"column_5"`
	Column6 interface{} `json:"column_6"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Price,
		&i.Description,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
